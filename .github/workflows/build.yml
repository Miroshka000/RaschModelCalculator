name: 🔨 Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  test:
    name: 🧪 Test Application
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Setup Java JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: 🐘 Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: 🔧 Make Gradlew Executable
        run: chmod +x ./gradlew
        if: runner.os != 'Windows'

      - name: 📦 Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🧪 Run Tests
        run: ./gradlew test

      - name: 🔍 Generate Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: "📊 Test Results (${{ matrix.os }})"
          path: build/test-results/test/*.xml
          reporter: java-junit

      - name: 📊 Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}
          path: |
            build/test-results/
            build/reports/tests/

  build:
    name: 🏗️ Build Application
    runs-on: windows-latest
    needs: test
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Setup Java JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: 🐘 Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: 📦 Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🏗️ Build Application
        run: ./gradlew clean build

      - name: 📦 Create JPackage (Windows)
        run: ./gradlew jpackage

      - name: 📁 Prepare Build Artifacts
        run: |
          mkdir build-artifacts
          
          # Копируем JAR файлы
          if (Test-Path "build/libs/*.jar") {
            Copy-Item "build/libs/*.jar" "build-artifacts/"
            Write-Host "✅ Copied JAR files"
          }
          
          # Копируем исполняемые файлы
          if (Test-Path "build/jpackage/*.exe") {
            Copy-Item "build/jpackage/*.exe" "build-artifacts/"
            Write-Host "✅ Copied executable files"
          }
          
          # Копируем отчеты
          if (Test-Path "build/reports") {
            Copy-Item -Recurse "build/reports" "build-artifacts/"
            Write-Host "✅ Copied reports"
          }
          
          Write-Host "📋 Build artifacts:"
          Get-ChildItem -Recurse "build-artifacts/"
        shell: powershell

      - name: 📊 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-${{ github.sha }}
          path: build-artifacts/
          retention-days: 7

      - name: 🧹 Cleanup
        run: ./gradlew --stop

  code-quality:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Setup Java JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: 🐘 Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: 📦 Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: 🔍 Run SpotBugs
        run: ./gradlew spotbugsMain || true

      - name: 📋 Check Code Style
        run: ./gradlew checkstyleMain || true

      - name: 🧪 Run PMD
        run: ./gradlew pmdMain || true

      - name: 📊 Upload Quality Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: quality-reports-${{ github.sha }}
          path: |
            build/reports/spotbugs/
            build/reports/checkstyle/
            build/reports/pmd/
          retention-days: 7

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔒 Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  notify:
    name: 📢 Build Status
    runs-on: ubuntu-latest
    needs: [test, build, code-quality, security-scan]
    if: always()
    
    steps:
      - name: 🎉 Success Notification
        if: needs.test.result == 'success' && needs.build.result == 'success'
        run: |
          echo "🎉 Build completed successfully!"
          echo "✅ All tests passed"
          echo "✅ Application built successfully"
          echo "📦 Artifacts uploaded"

      - name: ❌ Failure Notification
        if: needs.test.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "❌ Build failed!"
          echo "🔍 Check the logs for details"
          exit 1
